/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package src.Rechercher;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import src.main.Bdd;
import src.main.Groupes;
import src.main.Personnes;

/**
 *
 * @author louis
 */
public class RecherchePersonne extends javax.swing.JFrame {

    public Vector<Integer> contact_selec = new Vector<Integer>();
    public ArrayList<Personnes> liste = new ArrayList<Personnes>();
    
    
    private int id;
    private int menu; //permet de savoir si on vient de réunion, type , groupe ou personnes 
    /**
     * Creates new form RecherchePersonne
     * @param id
     */
    public RecherchePersonne(int menu,int id) {
        initComponents();
        Affichage_contacts(menu,id);
        this.menu=menu;
        this.id=id;
        
    }

    private RecherchePersonne() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        p_recherche = new javax.swing.JPanel();
        nom_pers = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        bnt_ajout = new javax.swing.JButton();
        btn_annuler = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ajouter personnes(s)");

        p_recherche.setBackground(new java.awt.Color(254, 254, 254));

        nom_pers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nom_persActionPerformed(evt);
            }
        });

        jLabel1.setText("Nom : ");

        bnt_ajout.setText("Ajouter");
        bnt_ajout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnt_ajoutActionPerformed(evt);
            }
        });

        btn_annuler.setText("Annuler");
        btn_annuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_annulerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_rechercheLayout = new javax.swing.GroupLayout(p_recherche);
        p_recherche.setLayout(p_rechercheLayout);
        p_rechercheLayout.setHorizontalGroup(
            p_rechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_rechercheLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nom_pers, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(108, Short.MAX_VALUE))
            .addGroup(p_rechercheLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(btn_annuler)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bnt_ajout)
                .addGap(50, 50, 50))
        );
        p_rechercheLayout.setVerticalGroup(
            p_rechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_rechercheLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(p_rechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nom_pers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 439, Short.MAX_VALUE)
                .addGroup(p_rechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bnt_ajout)
                    .addComponent(btn_annuler))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(p_recherche, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(p_recherche, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nom_persActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nom_persActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nom_persActionPerformed

    private void btn_annulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_annulerActionPerformed
       this.dispose();
    }//GEN-LAST:event_btn_annulerActionPerformed

    private void bnt_ajoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnt_ajoutActionPerformed
        Bdd bdd = new Bdd();
        
        switch(menu){
            
            
            case -4:
                bdd.add_liste_pers_temp(contact_selec);
                
            case -3 :
                bdd.add_liste_groupe_temp(contact_selec);
            case -2:
                System.out.println("ajout dans group temp");
                bdd.add_liste_groupe_temp(contact_selec);
            case -1 :
                System.out.println("pas d'id");
                bdd.add_liste_pers_temp(contact_selec);
                break;
                
            case 0:
                bdd.add_liste_pers_temp(contact_selec);
                break;
            case 1:
                if (id != 0){ //Si l'id de la réu est différent à 0, alors la réunion existe déjà et on insert les données dans la table d'asso
                    bdd.AjouterPersonneReu(id,contact_selec);
                }
                break;
                
            case 2: //Pour ajouter un groupe dans un type
                if (id !=0){
                    System.out.println("ajout d'un des groupes");
                    bdd.ajouterGroupeType(id,contact_selec);
                }
                else{
                    bdd.add_liste_groupe_temp(contact_selec);
                }
                break;
                
            case 3: //Pour ajouter dans un groupe
                if(id != 0){
                    bdd.ajouterPersGroupe(id,contact_selec);
                }
                break;
            case 4 : //Ajouter une personne dans un type existant
                    bdd.ajouterPersonneType(id,contact_selec);
            case 6 : 
                    bdd.ajouterGroupeReu(id,contact_selec);

        }
       
        this.dispose();
       
    }//GEN-LAST:event_bnt_ajoutActionPerformed
    
    public void selectOptions(Map<Integer, JCheckBox> check_type){

               Bdd bdd = new Bdd();
               ArrayList<Personnes> liste_contacts = bdd.AllContacts(0);
                contact_selec.clear();
                
		check_type.entrySet().stream().filter(e-> e.getValue().isSelected())
		          .forEach(e-> contact_selec.add(liste_contacts.get(e.getKey()).getId()));
                
                System.out.println(contact_selec);
                System.out.println("taille vecteur après ajout / supp : " + contact_selec.size());
 
                
    }
    public void Affichage_contacts(int cat,int id){
        
        Bdd bdd = new Bdd();
        ArrayList<Personnes> liste = bdd.AllContacts(0);
        ArrayList<Integer> present = new ArrayList<Integer>();
        ArrayList<Groupes> liste_groupes = bdd.AllGroupes();
        switch(cat){

            case -4: 
                present = bdd.liste_pers_temp();
                Afficher_tous_personnes(liste,present);
                break;
                
            case -3:
                present = bdd.liste_groupe_temp();
                Afficher_tous_groupes(liste_groupes,present);
                break;
                
            case -2:
                System.out.println("afficher juste groupe");
                present = bdd.liste_groupe_temp();
                Afficher_tous_groupes(liste_groupes,present);
                break;
            case -1:
                present = bdd.liste_pers_temp();
                Afficher_tous_personnes(liste,present);
                break;
                
            case 0:
                present = bdd.liste_pers_temp();
                Afficher_tous_personnes(liste,present);
                break;
            case 1:
                //Affiche les personnes liées à ce type de réu
                present = bdd.liste_personnes_reu(id);
                Afficher_pers(liste,present);
                break;
            case 2:
                present = bdd.liste_groupe_type(id);
                Afficher_tous_groupes(liste_groupes,present);
                //Affiche les personnes liées au type
                //Afficher_pers_type();
                break;
            case 3:
                //Affiche les personnes liés au groupe
                present = bdd.liste_personnes_groupe(id);
                System.out.println("Nb présents :" + present.size());
                Afficher_pers(liste,present);
                break;
            case 4:
                present = bdd.liste_personne_type(id);
                Afficher_pers(liste,present);
                break;
            case 5:
                present = bdd.liste_groupe_type(id);
                Afficher_tous_groupes(liste_groupes,present);
                break;
            case 6:
                present = bdd.liste_groupe_type(id);
                Afficher_tous_groupes(liste_groupes,present);
                break;
                
        }   
        

    }
    
    public void Afficher_tous_groupes(ArrayList<Groupes> liste_groupes,ArrayList<Integer> present){
        Map<Integer, JCheckBox> check_type = new HashMap<Integer, JCheckBox>() ;
        int x=50;
        int y=100;
        
        
        if(present.isEmpty()){ //si y'a pas de contact
            for (int i=0;i<liste_groupes.size();++i) //on affiche juste les groupes
            {
                JLabel label1=new JLabel();
                JCheckBox check = new JCheckBox(liste_groupes.get(i).getNomGroupe());
                check_type.put(i, check);
                label1.setBounds(100,y,500,30);
                check.setBounds (30,y,200,30);
                check.addActionListener(new ActionListener(){

                @Override
                public final void actionPerformed(ActionEvent e) {
                    selectOptions(check_type);
                }
            });
            

                p_recherche.add(label1);
                p_recherche.add(check);

                x+=30;
                y+=30;
            }
        }
        //Afficher tous les contacts 
        else if(present.size()>1){
            for (int i=0;i<liste_groupes.size();++i)
            {
            JLabel label1=new JLabel();
            JCheckBox check = new JCheckBox(liste_groupes.get(i).getNomGroupe());
            
            //Si la liste des personnes associées à la réu est vide alors on affiche juste tous les contacts
            
            //Sinon on vérifie pour chaque personne de la liste qu'elle ne fasse pas déjà parti de la réu
            // -> On checke si elle en fait partie
                    for (int j=0;j<present.size();j++){
                        //Si la personne fait partie de la réu
                        if(present.get(j).equals(liste_groupes.get(i).getId())){
                            //label1 = new JLabel();
                            check = new JCheckBox(liste_groupes.get(i).getNomGroupe());
                            check_type.put(i, check);
                            check.setSelected(true);
                            label1.setBounds(100,y,500,30);
                            check.setBounds (30,y,200,30);
                            check.addActionListener((ActionEvent e) -> {
                                selectOptions(check_type);
                            });
                        }
                        else{
                            check = new JCheckBox(liste_groupes.get(i).getNomGroupe());
                            check_type.put(i, check);
                            label1.setBounds(100,y,500,30);
                            check.setBounds (30,y,200,30);
                            check.addActionListener((ActionEvent e) -> {
                                selectOptions(check_type);
                            });

                        }


                    }
            p_recherche.add(label1);
            p_recherche.add(check);
            
            x+=30;
            y+=30;
        
        
        
        p_recherche.repaint();
        
        }
        }
        
    }
    public void Afficher_tous_personnes(ArrayList<Personnes> liste,ArrayList<Integer> present){
        Map<Integer, JCheckBox> check_type = new HashMap<Integer, JCheckBox>() ;
        int x=50;
        int y=100;
        
        
        if(present.isEmpty()){
            for (int i=0;i<liste.size();++i)
            {
                JLabel label1=new JLabel();
                JCheckBox check = new JCheckBox(liste.get(i).getNom() + " " + liste.get(i).getPrenom());
                check_type.put(i, check);
                label1.setBounds(100,y,500,30);
                check.setBounds (30,y,200,30);
                check.addActionListener(new ActionListener(){

                @Override
                public final void actionPerformed(ActionEvent e) {
                    selectOptions(check_type);
                }
  
                
            
            });
            

                p_recherche.add(label1);
                p_recherche.add(check);

                x+=30;
                y+=30;
            }
        }
        //Afficher tous les contacts 
        else{
            for (int i=0;i<liste.size();++i)
            {
            JLabel label1=new JLabel();
            JCheckBox check = new JCheckBox(liste.get(i).getNom() + " " + liste.get(i).getPrenom());;
            
            //Si la liste des personnes associées à la réu est vide alors on affiche juste tous les contacts
            if(present.isEmpty()){
            //JLabel label1=new JLabel();
            //check = 
            check_type.put(i, check);
            label1.setBounds(100,y,500,30);
            check.setBounds (30,y,200,30);
            check.addActionListener((ActionEvent e) -> {
                selectOptions(check_type);
            });
                
            
            }
            
            //Sinon on vérifie pour chaque personne de la liste qu'elle ne fasse pas déjà parti de la réu
            // -> On checke si elle en fait partie
            else{
                    for (int j=0;j<present.size();j++){
                        //Si la personne fait partie de la réu
                        if(present.get(j)==(liste.get(i).getId())){
                            //label1 = new JLabel();
                            check = new JCheckBox(liste.get(i).getNom() + " " + liste.get(i).getPrenom());
                            check_type.put(i, check);
                            check.setSelected(true);
                            label1.setBounds(100,y,500,30);
                            check.setBounds (30,y,200,30);
                            check.addActionListener((ActionEvent e) -> {
                                selectOptions(check_type);
                            });
                            break;
                        }
                        else{
                            //label1 = new JLabel();
                            check = new JCheckBox(liste.get(i).getNom() + " " + liste.get(i).getPrenom());
                            check_type.put(i, check);
                            label1.setBounds(100,y,500,30);
                            check.setBounds (30,y,200,30);
                            check.addActionListener((ActionEvent e) -> {
                                selectOptions(check_type);
                            });

                        }


                    }
            p_recherche.add(label1);
            p_recherche.add(check);
            
            x+=30;
            y+=30;
        }
        
        
        p_recherche.repaint();
        
        }
        }
    }
    
    public void Afficher_pers(ArrayList<Personnes> liste,ArrayList<Integer> present){
        

        Map<Integer, JCheckBox> check_type = new HashMap<Integer, JCheckBox>() ;
        int x=50;
        int y=100;
        

        
        if(present.isEmpty()){
            for (int i=0;i<liste.size();++i)
            {
                JLabel label1=new JLabel();
                JCheckBox check = new JCheckBox(liste.get(i).getNom() + " " + liste.get(i).getPrenom());
                check_type.put(i, check);
                label1.setBounds(100,y,500,30);
                check.setBounds (30,y,200,30);
                check.addActionListener(new ActionListener(){

                @Override
                public final void actionPerformed(ActionEvent e) {
                    selectOptions(check_type);
                }
  
                
            
            });
            

                p_recherche.add(label1);
                p_recherche.add(check);

                x+=30;
                y+=30;
            }
        }
        //Afficher tous les contacts 
        else{
            for (int i=0;i<liste.size();++i)
            {
            JLabel label1=new JLabel();
            JCheckBox check = new JCheckBox(liste.get(i).getNom() + " " + liste.get(i).getPrenom());;
            
            //Si la liste des personnes associées à la réu est vide alors on affiche juste tous les contacts
            if(present.isEmpty()){
            check_type.put(i, check);
            label1.setBounds(100,y,500,30);
            check.setBounds (30,y,200,30);
            check.addActionListener((ActionEvent e) -> {
                selectOptions(check_type);
            });
                
            
            }
            
            //Sinon on vérifie pour chaque personne de la liste qu'elle ne fasse pas déjà parti de la réu
            // -> On checke si elle en fait partie
            else{
                    for (int j=0;j<present.size();j++){
                        //Si la personne fait partie de la réu
                        if(present.get(j)==(liste.get(i).getId())){
                            //label1 = new JLabel();
                            check = new JCheckBox(liste.get(i).getNom() + " " + liste.get(i).getPrenom());
                            check_type.put(i, check);
                            check.setSelected(true);
                            label1.setBounds(100,y,500,30);
                            check.setBounds (30,y,200,30);
                            check.addActionListener((ActionEvent e) -> {
                                selectOptions(check_type);
                            });
                            break;
                        }
                        else{
                            //label1 = new JLabel();
                            check = new JCheckBox(liste.get(i).getNom() + " " + liste.get(i).getPrenom());
                            check_type.put(i, check);
                            label1.setBounds(100,y,500,30);
                            check.setBounds (30,y,200,30);
                            check.addActionListener((ActionEvent e) -> {
                                selectOptions(check_type);
                            });

                        }


                    }
            p_recherche.add(label1);
            p_recherche.add(check);
            
            x+=30;
            y+=30;
        }
        
        
        p_recherche.repaint();
        
        }
        }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecherchePersonne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecherchePersonne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecherchePersonne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecherchePersonne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecherchePersonne().setVisible(true);
            }
        });
    }
    
    public int getId(){
        return id;
    }
    
    public void setId(int id_reu){
        this.id=id_reu;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnt_ajout;
    private javax.swing.JButton btn_annuler;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField nom_pers;
    private javax.swing.JPanel p_recherche;
    // End of variables declaration//GEN-END:variables


}
